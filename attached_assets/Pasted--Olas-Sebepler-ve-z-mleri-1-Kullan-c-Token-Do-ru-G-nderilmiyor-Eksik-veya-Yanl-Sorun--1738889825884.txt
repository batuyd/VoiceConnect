 OlasÄ± Sebepler ve Ã‡Ã¶zÃ¼mleri
1. KullanÄ±cÄ± Tokenâ€™Ä± DoÄŸru GÃ¶nderilmiyor (Eksik veya YanlÄ±ÅŸ)
ğŸ“Œ Sorun: API isteklerinde Authorization baÅŸlÄ±ÄŸÄ± eksik olabilir veya yanlÄ±ÅŸ bir token gÃ¶nderiliyor olabilir.

âœ… Ã‡Ã¶zÃ¼m: API isteklerini kontrol et ve Authorization baÅŸlÄ±ÄŸÄ±nÄ±n doÄŸru ayarlandÄ±ÄŸÄ±nÄ± doÄŸrula.

ğŸ“Œ Ã–rnek: Bearer Token ile istek atma (JavaScript - Fetch API)

javascript
Kopyala
DÃ¼zenle
fetch('https://your-api.com/api/user', {
  method: 'GET',
  headers: {
    'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
    'Content-Type': 'application/json'
  }
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));
ğŸ‘‰ Tokenâ€™Ä±n localStorage veya sessionStorage iÃ§inde tutulduÄŸundan emin ol.
ğŸ‘‰ Backend tarafÄ±nda, token doÄŸrulama kodunu gÃ¶zden geÃ§ir.

2. Token SÃ¼resi DolmuÅŸ (Expired)
ğŸ“Œ Sorun: KullanÄ±cÄ± giriÅŸ yaptÄ± ama token sÃ¼resi doldu, bu yÃ¼zden API artÄ±k kabul etmiyor.

âœ… Ã‡Ã¶zÃ¼m: Token sÃ¼resini kontrol et ve yenileme mekanizmasÄ± (refresh token) kullan.

ğŸ“Œ Ã–rnek: Token sÃ¼resi dolduÄŸunda yenileme (Axios - React/Node.js)

javascript
Kopyala
DÃ¼zenle
axios.interceptors.response.use(response => response, async error => {
  if (error.response.status === 401) {
    const refreshToken = localStorage.getItem('refresh_token');
    const newToken = await getNewToken(refreshToken);
    localStorage.setItem('access_token', newToken);
    
    // Yenilenen token ile isteÄŸi tekrar gÃ¶nder
    error.config.headers['Authorization'] = `Bearer ${newToken}`;
    return axios(error.config);
  }
  return Promise.reject(error);
});
ğŸ‘‰ Backend tarafÄ±nda refresh token desteÄŸin olduÄŸundan emin ol!

3. CORS veya GÃ¼venlik PolitikalarÄ± Tokenâ€™Ä± Engelliyor
ğŸ“Œ Sorun: TarayÄ±cÄ±, gÃ¼venlik nedeniyle cross-origin isteklerde Authorization baÅŸlÄ±ÄŸÄ±nÄ± engelliyor olabilir.

âœ… Ã‡Ã¶zÃ¼m: API sunucunda Access-Control-Allow-Headers ayarlarÄ±nÄ± kontrol et.

ğŸ“Œ Ã–rnek: Express.js CORS AyarlarÄ± (Node.js)

javascript
Kopyala
DÃ¼zenle
const cors = require('cors');
app.use(cors({
  origin: 'https://your-client-app.com',
  allowedHeaders: ['Authorization', 'Content-Type']
}));
ğŸ‘‰ TarayÄ±cÄ± konsolunda CORS hatasÄ± olup olmadÄ±ÄŸÄ±nÄ± kontrol et.

4. Backend Yetkilendirme KontrolÃ¼ HatalÄ±
ğŸ“Œ Sorun: Backend, gelen tokenâ€™Ä± doÄŸru doÄŸrulamÄ±yor olabilir.

âœ… Ã‡Ã¶zÃ¼m: Backend tarafÄ±nda JWT doÄŸrulama kodunu kontrol et.

ğŸ“Œ Ã–rnek: Express.js JWT doÄŸrulama (Node.js + Express + JWT)

javascript
Kopyala
DÃ¼zenle
const jwt = require('jsonwebtoken');

function authenticateToken(req, res, next) {
  const token = req.header('Authorization')?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Yetkisiz eriÅŸim' });

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: 'GeÃ§ersiz token' });
    req.user = user;
    next();
  });
}

// Ã–rnek API endpoint:
app.get('/api/user', authenticateToken, (req, res) => {
  res.json({ message: 'GiriÅŸ baÅŸarÄ±lÄ±', user: req.user });
});
ğŸ‘‰ Backendâ€™in tokenâ€™Ä± gerÃ§ekten doÄŸruladÄ±ÄŸÄ±nÄ± test et.